import re
from enum import Enum

class Letters(Enum) :
    A = 0
    B = 1
    C = 2
    D = 3
    E = 4
    F = 5
    G = 6
    H = 7
    I = 8
    J = 9
    K = 10
    L = 11
    M = 12
    N = 13
    O = 14
    P = 15
    Q = 16
    R = 17
    S = 18
    T = 19
    U = 20
    V = 21
    W = 22
    X = 23
    Y = 24
    Z = 25

def encipher(text, key):
    if (text == ' '):
        return text
    return Letters((Letters[text.upper()].value + Letters[key.upper()].value)%26).name

def decipher(text, key):
    if (text == ' '):
        return text
    return Letters((Letters[text.upper()].value - Letters[key.upper()].value)%26).name.lower()

def check_key(ciphertext, crib, position, keylength):
    plaintext = ""
    key = ""
    for i in range(len(ciphertext)):
        if i < position or i >= len(crib) + position:
            key = f'{key}-'
        else:
            key = f'{key}{crib[i-position]}'
        
        if i < position - keylength or i >= position - keylength + len(crib):
            plaintext = f'{plaintext}-'
        else:
            plaintext = f'{plaintext}{crib[i-position + keylength]}'

    for ch in range(len(crib)):
        for i in range(position + ch, len(ciphertext), keylength):
            letter = decipher(ciphertext[i], key[i])
            if letter == 'j':
                return False
            plaintext = f'{plaintext[:i]}{letter}{plaintext[i+1:]}'
            if i + keylength < len(ciphertext):
                key = f'{key[:i + keylength]}{letter}{key[i + keylength+1:]}'

        for i in range(position + ch, -1, keylength*-1):
            letter = decipher(ciphertext[i], plaintext[i])
            if letter == 'j':
                return False
            if i - keylength >= 0:
                plaintext = f'{plaintext[:i - keylength]}{letter}{plaintext[i - keylength + 1:]}'
            key = f'{key[:i]}{letter}{key[i + 1:]}'

    return True

def autokey_solve(ciphertext, crib, position, keylength, playfair_ciphertext: str):
    plaintext = ""
    key = ""
    for i in range(len(ciphertext)):
        if i < position or i >= len(crib) + position:
            key = f'{key}-'
        else:
            key = f'{key}{crib[i-position]}'
        
        if i < position - keylength or i >= position - keylength + len(crib):
            plaintext = f'{plaintext}-'
        else:
            plaintext = f'{plaintext}{crib[i-position + keylength]}'

    for ch in range(len(crib)):
        for i in range(position + ch, len(ciphertext), keylength):
            letter = decipher(ciphertext[i], key[i])
            if letter == 'j':
                return playfair_ciphertext
            plaintext = f'{plaintext[:i]}{letter}{plaintext[i+1:]}'
            if i + keylength < len(ciphertext):
                key = f'{key[:i + keylength]}{letter}{key[i + keylength+1:]}'

        for i in range(position + ch, -1, keylength*-1):
            letter = decipher(ciphertext[i], plaintext[i])
            if letter == 'j':
                return playfair_ciphertext
            if i - keylength >= 0:
                plaintext = f'{plaintext[:i - keylength]}{letter}{plaintext[i - keylength + 1:]}'
            key = f'{key[:i]}{letter}{key[i + 1:]}'

        playfair_ciphertext = f'{playfair_ciphertext[:position]}{crib}{playfair_ciphertext[position + 1:]}'
    return playfair_ciphertext

# ciphertext with spaces removed
ciphertext = re.sub(r'\W+', '', """
UVZJU GAAAS IPYIQ GMUKU QOYAE DFIAO MEOVV TUGIR TKCJK YFQED 
CKRCA LMFXC HETCZ LAVKO ICUJG RXMOT FVGTI IPJAP JHBVL QMBYZ 
DAPZT BJMNF ABTHK FBNTE TASTI EIMYG SMGFA JEJEY AUFYP RLDSJ 
EMMTI CFTYJ HGPGO WCQQQ WOPWO WFRKQ LHHOZ KCBQP XPADQ OMIRJ 
TKIYE DXVIC GQUMC JOFJL NCGOF PXFFL OLAGB KOGHN HSYUE NURLH 
INOQH YYSKN OEDAW XVRKB CFOHG DOANZ DRBCH KHGPX ZQQVO UGVZG 
WMRGF ZZECL EDDAH ZNNYL UYZPC VDRQQ YNRLK UWPSJ EYSWX PHTVB 
IHLOK BOKPK PJZNL GPFSC OCKFO EXDUH YUPUB YJIZN ZHCHE BBVDG 
TAXAD BXZVI CRGLJ BIYJD TRFWW UDMXM WOZWG SSAHN UYLRR JPGBB 
NFYAA CNYUJ YWYUU ATQNT TMTHL PCNSI XGKIL PDSRO GGLJV BHLGV 
ZEDKI GEXEC FZNHH JDHSJ IEEFG GRZRI BRDDY RHCYJ NNGCL QDZIV 
EHUQL CSDNN OHUHW TJZOF UPAJQ PQNKC BRUWU PUNOB FPVQI SUIJW 
YUZEA RJUWN UCOEC YUHBO NMDHT YOTZB OTJUD FMZTV OAFRM DGOFN 
YTKVW RCUQN FUILN TVLAO YUXKZ MATQT TPNDQ NPILX ZTGUZ ZVTZS 
QMTGN FRAHU KOLGW CCHFW MVCUI QESET CPZTI AIASL YOVTE GNCMH 
FVSMK AXZGS DSJYG UASJW KQISA MCRYW AXHKW YXXYM WQHHT SPNPH 
GBITO DOUTU GVQXT RMMLN RDIWT TKAAF TFUGR BHUCZ BOIPY SLUCG 
UCSQL YDLRY ANKJC VGYJA AMLMS WPUHW MQFTP QJMWA OWPTR XQMPM 
ASVMJ RJHVH LBNNK JCYEI OEMGA WDERM SEBXR UPYCF VIUEE DNNWB 
JENRG YAWCO YUBGZ GYAQU OIYRW GDOJE XVIPJ EYHJJ DWGYA TPBZS 
UCSGJ CKWZH OHAYQ REJKB YUIBO PBBFZ RCBWX SCUKB XGABL NBPSZ 
FVSBE NFTQZ KEUNX RVOIP ANUND GTKWV YLIYK IUDAW ATHKM EBRYA 
XTDFG EIATR UQJMQ BPYCW XUUEO VHVEN KTDWI TGWYP BWMLQ LNBBH 
ZZMTI FIWZW QWMRL MACAU BQNDS ZSXLQ KBOPH SMTPG GINBT AMPMJ 
PQXKB RASCS DPIFL JAJTX DWNNK USBRV AVTSY GOUXU HMZZR RYIOF 
SGUSH FUVVC FHFRT JCQJQ IEFIO IZAWO RENPO RPDZD IASIJ SAVCO 
NLCWZ NPJBH QFYCK YCSKY CYXLX IVWDN LTMCX QUILS KDNVP CMMVY 
KCYIY VMMRE RNXLZ AZNOF WTIOP ONUYS EDGMJ NOIVG FCOSJ PQAYR 
KOQUP QFHWE NJFZU VGAKG EJGGU RPRZL VIBBQ XYAYU QXUZH WFOOP 
FIVMS PIPHE NLAPF EGJXX EONIT YVYXH UZICH BKKAG FGUYC CCJIC 
AJYEH VEIZR UUSMM LMTLH CPUPA LHJEH BPRCE CDNBA YZRFV JWXGN 
ZNIRD HXBVE KHSKV USQKO OYIYP CSZKO OYYRC LEALU XVBTA GDNYD 
TOIAT PIWFY VYACU UWFTG ZOMTD GICFI GYTCN LXVMV NQJLJ HDMVP 
PQKZF YAKBF IVVAO VAOAX MUVUR KUDIH WYZTM TOGSA ZLIFX RXTHM 
TFFNM FUPTA BOSST WDGOJ ZPPHG MNHJE NUPSN RVXTV YBYJW ICGOO 
KBCCJ PIIKT UVLBH CRJUM QQPCS ITSPW SLGXT MCRNA OWWIO FAPMM 
PBWQV UFNBI ZNCJI DWPMN KOSML CFMZH KONIP OIZJY HPBIY UNBNV 
YIWIV ZMSLP SXYPB JEYMS WTOUX UDYYM GERHX MVQVS JKDXN CKZXA 
XFUSP FYNUI XXHWJ ZTLOQ IRZGP ATDVV GZGMN XKGVN GVCOU TOHTS 
FEPXK ICNNN JSHHK RIYHG OOUPM WIYMM FMAQD WMBIO FSNGX PLYQK 
CGJNG MNLCE LBCRB WNUQI AMAEG TIAUQ QLXLB FVAPG YBDWP LKSGZ 
JNYZZ RUZNP NKSXL QKWZV YORWO MAPSF URXYC NAWIR MIZVI XWKRQ 
VONAT GSFUR XYCNA UDGPV XXIPT CMWSB ZSHCN IGUXK IPWSJ YLTKD 
LKJZZ QENFL PJOSM SUBEQ YXBBH GZGYM XCOCF XYBOP KFTQY GGAPZ 
WDUZF AHHMY CUDUT YWQHV CJPIP AGAOO WARRL HYALP YLATW LYMOA 
ZBUNB MYMUT LEEOY VYPOF EMEIE HZVDA HVZHR NOHHP LELTG GOIJM 
HGNUW UPXOO PISIW XYWYI KUQSJ QECGJ KKURU OFOSK RBQPT WSSEV 
YATEK ZIGMI LKPVX VPWAV YARNC ZVPXU WCZGS PDTAO XJQDY ZQMCS 
ZIQDI SSMVE RNCPD UMAIN HCFJO ANMJU WZSOR OSUKN KWKBY QQVAZ 
DLKPE AJPZI NOMVU HATPO CLWOR IUGCH LMLFP BUJUX OFCRH BKBYQ 
MPTUK ZLKYA MIYTS SYLNM HOFTU NSXRB UEIBR NVGFP ERUMC FAMUK 
LATMO ZWPVV BRVUM HPSOB MCUDA DANGD MFWKT TGEHD IYLOD YSNNX 
QVXCM ABBAA JCLVD NMIID CJIGX JBHCZ WVLML JVXYY SECHG UUHPT 
LBQIR BDBTA YAMHM AIHVF GCLUM KLQZP JHYUH ASOGX RZLLO JXWJD 
EPYSG YZGXB HIDLK ZDAMF COCLM DDAMC GODNI CJEFY OBMMW OAVOO 
FAJLC WPZXS CCSWG CWLXR OQPGO AEGRA WGUZI XAKRB STOFA SPDRD 
DWOWN TELUY UARTK YRPFZ JTESB AXRLF XOKFE CVIHJ CBEZF GSYDV 
NQDYG ZYJNN TWLQW WMCXR YBVDA IOFNL PGAET TJLAC JKUYS TEOFL 
JMBPI HVPOK IJQEW NRTEB IBKTI EPUTU ONOHN RUKIO XYKGX HPPZA 
WCVZQ INTCD XBLDQ BLTXY DXZIU PUTXS GPGBN GHAUJ YPDXO ROLIF 
GYLPQ QWFLL RAIPF DICJE YRDIY GLWDF PPDIQ BJGMZ UTUZP XTFFO 
QOFWW COPFC JGXQO NTCGO UGIDJ AEHKU QETMX RBDIC PDYOX XLHUM 
ELCXY CNEYM XXEGT MNHBV TZHLM FJPHL PGPVT DPCSI ZSZGE FCTNP 
PMCZI DEGJB HJTIF CTWJX PKAYV TWOSP BDBJN JFJJP DIXUO BIQZW 
GAFHU MGVAA LHYNZ TTGUS WNJKE JZELO OBIQW OIAOB FVCZP AZGNN 
GOTWI LTGFK QWMRM JFBDP ICSFQ EKJXS HJWGC UCYLH WTJNL VBYLB 
JIJES YGPXA RMLUF GRSKS YXPVV WGCOS VVABG IGCPF HGDOX JDSFO 
ALBMY OLKUB LMQQS EZDLG USUGJ LZHSU VIUBN GWCUJ GUINX MPOKT 
OFTHU RIOXC RIDMR MCOQF RMZGW KZPNM URJOZ PYLUZ CXYHY UUVXC 
YBENJ NPUXW XJAAW IUJCH UYDHC PNVJH CYSPT HCLLK WINIM LBTDJ 
HZLPE BKPYI ISWVO CIAWT OYTGW MWTAS VFJBI TOUXI XPTBY QJNZP 
PPSAV KUAZB ISOHW ZSARG VTFBA TQKED OMEOP GNNJX TOBJY AYCWA 
TVBLH XHSOU CVHAS LYYMX ICTEE HQCBB RJUMT LWLBT VKUSA MDYWP 
YBKLK DBSNJ UBGZG RMWNV DFIYX PATXG SGVEZ HBWJE ULMEI YJXGM 
BLOBZ KWPLI CEEIM ZLOVU NEMWE SXXZL ANYBP LEIVS EUDQJ YYMSY 
XCRLY FRBWR ULUAQ GFNOU LKIKA BCQLX UIALF DNGIS MDDWK FKXUM 
UOGOE VRRNL ZDXVZ ZZCHA AYQZZ ITGLJ LBXAX PWJFQ TMBRP BGNUM 
BSPWH TWXHM TYDVQ FSTES DPUNU OMNOD SFZWC EBSYG IECAI BOLLG 
KXZID QQFGM ZOXTW XYIUS IJXNZ CPAUX PQJHA ZFTKT VOHTB RAGXU 
IAWGM ESOSB RDBUT AKOJZ WXXVA YNKTE OAEYD OYYCC WOYTK UZXPO 
GIXKY IBIIY XATTX RZGBC GIGDZ VEDUO UTSGH ZIRYY RZYWI GVJES 
EIQFU RPYVD IBDYL NGRTI DAZQD JZPAC NNMBX NMDKZ CCTGQ IVUIJ 
RTRZA AYATZ UYRMG VMQFL UJEWL DVLTK PWKOB FYWUO TSRNE ZJRNN 
GWLQD YNSBD VEXDU WULWA XQORZ WQVRO ETOYO AWQNM PDVOX XFFFM 
MMYMH FUJHG EGDJC JOCPO AWSLX YIEAX KCHFC RXPRL UIVTP GPONL 
VQUDK TCLYC MOKBX BTZXU OEKKK IRDNU CZXRN HODBD PVJRL GJDIQ 
UJHNX LASWC EPWAK AYCQT XAYCV LQUZK XGZOV NGJVF OLQIN QBYZA 
XLCDT ULPFX ABGTB IGOLI HMXLX VKWNP IDIRP RQRPS OPBBY UXHQH 
EDPUP RTTCO WLSIG NTBUO RASIA HGIHO JBABS QTHRE NZPAS TTNEE 
UFTIA FTATG MTMXC DGBMG HSAJP IENZC GNMVY QRHLQ WQMBO URHAT 
XVHAK YLDYV QQSIK TOFGT GTJCD PVIQP LACUL KYSTO CKAPG YOVIO 
RVGVG XXUOO HSHAL ZMWXE XTYMH GVFLX ZALOD HPGTK NKKWU RZEZJ 
GDPVU TKTNK ASOTW WHVTI LBXSI EQHOE AUMUN TIBRD AFHYC GIORD 
LJQWK RTBZG PSPND MUSTN SVSPS SJYML KJNLY TXUFF ZOBKF FCOVB 
LEYRV EPMRP KKIFN QUNEI RTMUT QVDTB OQVQL TFVQM FPVXZ NDGQY 
JINNJ SQYRH AZKDD GTPZS OPBWA OSJEZ XEQOP BLNAU DFTDX MPCBH 
DZBIA MSIZH FPBPP WZBMG ZJDUA KJNKJ SOLTV VNWPS HAMEA BDXRP 
BAVDX NWUCH SUZSI EFPIB MAPGV SVJFL PNYZL HIOQY OKYZL NKBSO 
CDEOD MSBYW MTKYS XABUG QVCSX NTIXX FTXBO LZCJS HGXGB RLIWY 
IHTFV CUIBR LUGTX EAMZW CNKUG YRRJL CJULD NYCWL BEGLU AVTQV 
ENLUF EUVSK XUHLF FWYZM SVAEG QRINV JZHPG JRXUJ XXEJI HXLVQ 
ARNLZ TWPKY RMNLQ UMGKU LVAVM JHRXR YITJG VOWRU TCFTS TPLXA 
YYIIT HSOJN RFDII WSVIP BXFCF NPWPY DKFTO NVRBI NTIPG KZMLY 
IKIUE WEEUN GQRZO BMNIO LKOGR OJCKJ LPHSW OLFTQ ENMIS HJDEP 
KLWPN VOFOA ENLSO ELRQM YUYDZ XCKES EYHLV HDMBO EJUAP UHDWU 
HUZWS XGIBM SQMFT KFTIH BNTVW TFXDP OSBEV IQEGP JOPBY CUTRC 
CXGCR RUDEP OGVHT LWOHB OEWXB NHULE CWYUX TZFSO JDIAR VYQKH 
IKDEP GBCUX NXMVF DUHLB HCRJF TBADF IJJES UGZLL WNUYU QDOBP 
FNCSI FEZHV KBEOB RNRIG NPBCO GUARG RDACK FMTBX HUKLK YXGRW 
KMAEK MNXLY GYAOY RKAVE LWOJI MBQAC MRPJI UJVMS MIOVU DIHMM 
NWVYL KPJTL JLVHT LJUPN SQNLI NCGNS DVNIH UXGCM QFKHA QPSTW 
WCCKY PRIFD JELYB AGNME RYHSW UWMWK MVSCW HHRMH LWPYN ADTJF 
QVVKD ATIYD GOLXU HQHCV CPPMV HTJCG GPITU WGFMN LMUMY DUXJG 
FUGKZ TDHKA KNZBZ MAUMN DYZKU HAUVV WWBQD SDHUF EYEQZ ILQJE 
BKKIG SQEZZ UJVIT OXLPY NLHCU AXYHC NSCYX KGGPC OSIVW QBFBI 
SUUNW JPMCR TKTHD LWEWM QWMWT TNDGS AWLIX ILXPL HLGXZ YUWBD 
GCVLU RURQO ZERTP XABZH ZHCPF HIVCL RZFUS PLJBJ EFUUQ SJOJS 
ITGHB VEDWH PTZLA ASDPA ABNWM NNBBH XBMPY EBQTI LOMMN SBISJ 
ROQLT YOZPA VDCQJ SABUT TVONY XBCJQ BCQRL JFMGW RXBRM SEXPY 
CAIRC ITHMU TIIRK LMIYU AWTPU FUALZ AYAQV UPAQS AYIIR NHBMV 
BFABA BMTMT UWJJR LROYM YCBWK JWBWM AFHMP RWEKP ESTIW VUOEZ 
WRXWV ZWIMP URTXS VEUZB BIUXL ZBCLN SLCED THJGO RNRKG YLFTX 
IHKUH IORYD IMWTC QBOML POXJB YHQCY PJRXE KUAOO SSRHR NFEVJ 
ZSLBW EQIFD OCWQC CJMUA OQWQJ BRCAB YBOUI ENDDG UJBRP LRYLE 
SWEKU QZBYS SVNEU XZHAB QBKCV ACNCA VPKIE IRBCA KITOK UWCWK 
VVVZI JXVVO VJAIG VWEVA JLBNY WRVED OAVWW KQJXD WKZSL SKSPU 
PUJUU ECEVJ XNAWP AVFGX RUCYR LZDJU CODSQ LRJDB PVDRX SIAMA 
RAZNY SVMES RAAPY IUNAL DHEYO WGHEF EDYOY MXGFP QDZRY LIFEI 
IVPML FIRHJ HIUWE HRYRO OUKUI WROKD WXHFP BJUNZ RWSTE GHGLV 
ITOYD MRBUH AVSNG RZMLZ UCTKO UBYAS IMJKO OGXAF FZXFD CCCUF 
MCCLZ YIOZX XYOYN FHMYJ OYFAL JPBEM AUXOJ HUFHH LUMNE QVPAH 
FLBPK FGDUK AOUAK LBNQO JPMGG ANDKX LZBNZ PBWKM DYHTI WICUA 
SUYRW UZQTB VIHXC NIOSW SXARZ AZITH XAAWV RZACC OVOOV FXRCX 
UQOJH DXZFO SDAEI CRQVU GMEFU YCZVA DWMYT LKVPX DEZRT KDIHG 
RHJIU XMLPJ AFAVJ GVJUN TFMPZ XITIC IJGJZ YWDAU BJIYG ULQQL 
AWVKV CNLVM WWIOU VCWRS GJVCT AKIHN KQVHP XCPSQ CUTPE YIXYA 
IYHJZ CQINM SLWON YISFL LTGUZ IOIMS YBTVF MISOI VWGXG PUUAW 
LIENY EUOQW KHNAH ZUVEO HUKBS WHCRB TKCKZ YOSMH FPFJK KOQOP 
TFRRI SBPTJ ZGLBK FXAEG HGBPC ZSKXP EIPSR MRFCQ HQAPK KHYMR 
EVWFT KTVLY MXQWM HSXQX HYUPD BEHXE YUNAE QTLKU NAIAE YRMJR 
IIIWR TDXDF IVZEW CMCQS DHOEU YTLBH UXJCL KMCFW SOIBA GSQSG 
NSKOG JZQPT ISWPK NESMF FSVTY PBHVT UEEVV DTBGI GXWYQ OSNZT 
GUXXC IYFEG BYTSU WQEYA PWAPX TCYIM GAAFI ZHQYA VQLAJ GMVPK 
EGYGA XIMMJ FCYGP UOEVA BQNUA MCROM EZKJB TRUOL NFHBF EURDE 
IQDHL WNYEG YYTDE JMZJA KEEHR OZVEN GLNAY BEXJC HZZHQ WTAAR 
PEMRU DTAKB XUVVU UZHXR NPXSN GPYZH NSNAU IJDEO AGLVA ZWHQS 
DMWPF XPOAD TULWY CXMRL IFMOF JDQGJ QIQTP NUDHX PXPPW LGISB 
ALFOS IIVVX BBVLJ KVEID FRBMI TMJBR UBYCT ADEIP KXUKE GCARY 
SZHCD DXVMC JTLST ZWBHC NAPZE IRYGN NNLBQ EUNKS ITPVG YFGJJ 
DXQWH WEGVY WRQLI DPWTP QFVSP FZUUH EZXVH LWDKG YAJGG EXVJG 
NTZUX DBHWT WUVPE VYGYD RZHXV BCFQW SZKCT MOYJF BKRIJ RHEQF 
IEIVQ RPWHP XBQNY ALEHU WWZAK HEJTD AWVQV NOPAN KVKCZ XOVEL 
GJNGU GOUVC DLIBF PLVJS ANPWW OIDJZ DWUBO QMFOS ZHZXT CLKVN 
YOBOI GKBPO IQLVD YOYRR ZXUHH ZNEQS HLRAG OZAQG IENZU TAEQM 
PJPHT YJXGN HYKKS MVTTR SKKCG UIAXP
""")

# crib to use to test autoky
crib = "a"
# range of key lengths to test, set to 10 since we know that's what it ended up being
minimum_key_length = 9
maximum_key_length = 10
correct_key_length = minimum_key_length

# Set to true if no Js found after decrypting based on crib
found = False
for i in range(minimum_key_length, maximum_key_length + 1):
    correct_key_length = i
    print(f'Testing autokey with key length {i}...')
    for j in range(len(ciphertext)):
        if check_key(ciphertext, crib, j, i):
            found = True
            print(f'Key Length Identified: {i}')
            break
    if found:
        break
    print(f'No possible decryptions found for key length {i}')

if found:
    print('Decrypting autokey...')
    playfair_ciphertext = ""

    for i in range(len(ciphertext)):
        playfair_ciphertext = f'{playfair_ciphertext}-'

    for i in range(26):
        print(f'Finding all occurrences of: {Letters(i).name}')
        for j in range(len(ciphertext)):
            playfair_ciphertext = autokey_solve(ciphertext, Letters(i).name, j, correct_key_length, playfair_ciphertext)
            print(f'{playfair_ciphertext[:100]}...', end='\r')
        print('')

    print(f'Final Key: {playfair_ciphertext[:10]}\nFinal Plaintext:\n{playfair_ciphertext[10:]}')
else:
    print('Key length not identified, try a different range.')